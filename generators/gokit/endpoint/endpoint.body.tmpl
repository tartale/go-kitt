{{- define "body" }}
{{- $interface := get . "Interface" }}
{{- $method := get . "Method" }}
{{- $namedInputArgs := $method.InputArgs | autoname "input" }}
{{- $namedInputArgsNoCtx := $namedInputArgs | filtercontexts }}
{{- $inputDeclarations := $namedInputArgsNoCtx | toDeclarations }}
{{- $inputNameList := $namedInputArgs | names | join ", " }}
{{- $inputNameObjList := $namedInputArgsNoCtx | names | upperfirst | prefix "obj." | join ", "}}
{{- $namedOutputArgs := $method.OutputArgs | autoname "output" }}
{{- $outputDeclarations := $namedOutputArgs | toDeclarations }}
{{- $outputNameList := $namedOutputArgs | names | join ", " }}
{{- $outputErrField := $namedOutputArgs | firsterror }}
type {{$method.Name}}Request struct {
  {{- range $inputDeclarations }}
  {{ . | autotag | toString | upperfirst }}
  {{- end }}
}

type {{$method.Name}}Response struct {
  {{- range $outputDeclarations }}
  {{ . | autotag | toString | upperfirst }}
  {{- end }}
}

func Make{{$method.Name}}Response({{ $outputDeclarations | toStrings | join ", " }}) {{$method.Name}}Response {
  var result {{$method.Name}}Response
  {{- range $namedOutputArgs }}
  result.{{.Name | upperfirst }} = {{.Name}}
  {{- end}}

  return result
}

func Make{{$method.Name}}Endpoint(svc {{$interface.Name}}) endpoint.Endpoint {
  return func(ctx context.Context, request interface{}) (interface{}, error) {
    {{- if $inputNameObjList }}
    obj := request.({{$method.Name}}Request)
    {{$outputNameList}} := svc.{{$method.Name}}(ctx, {{$inputNameObjList}})
    {{- else }}
    {{$outputNameList}} := svc.{{$method.Name}}(ctx)
    {{- end }}
    {{- if $outputErrField }}
    return Make{{$method.Name}}Response({{$outputNameList}}), {{$outputErrField.Name}}
    {{- else }}
    return Make{{$method.Name}}Response({{$outputNameList}}), nil
    {{- end}}
  }
}
{{end }}
